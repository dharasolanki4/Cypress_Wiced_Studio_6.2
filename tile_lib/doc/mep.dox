/*!

\defgroup MEP Multi-endpoint TOA

Multi-endpoint TOA (MEP) is a means by which multiple apps from the same phone may
communicate with a single Tile device simultaneously. MEP establishes the concept
of TOA _channels_, which are TOA data streams that can be accessed concurrently. A
channel is specified by prepending the channel's CID to the TOA message:

CID    | TOA message
------ | -----------
1 byte | ATT_MTU - 3 - 1 bytes (typically 19 bytes)


# Channel types

There are three types of channel:

- The connectionless channel: a special channel for unauthenticated traffic.
- The broadcast channel: a special channel for one-way communication from the
  TOA server to all TOA clients which are listening for broadcasts.
- Authenticated channels: channels that are allocated to a TOA client and
  require a message integrity check (MIC) to be appended the TOA message.

## Connectionless channel

Transactions on the connectionless channel have the following format:

@ref TOA_CONNECTIONLESS_CID | Token   | TOA code | TOA Payload
--------------------------- | ------- | -------- | -------
1 byte                      | 4 bytes | 1 byte   | Up to @ref TOA_MPS bytes

The token is a value randomly generated by the TOA client in order to identify
the transaction. When the TOA server receives a command on the connectionless
channel, it will send a response with the same token as in the command.
Example:

@msc
APP, TILE;

APP->TILE [label="TOA_CONNECTIONLESS_CID | 0x12345678 | TOA_CMD_TDI | TDI_CMD_READ_TILE_ID"];
TILE->APP [label="TOA_CONNECTIONLESS_CID | 0x12345678 | TOA_RSP_TDI | TDI_RSP_READ_TILE_ID | Tile ID"];
@endmsc

## Authenticated channels

Transactions on authenticated channels have the following format:

CID    | TOA code | TOA payload         | MIC
------ | -------- | ------------------- | ---
1 byte | 1 byte   | Up to TOA_MPS bytes | 4 bytes

### Opening an authenticated channel

To use an authenticated channel, a TOA client must use @ref TOA_CMD_OPEN_CHANNEL
on the connectionless channel, generate a session key, and then send the
@ref TOA_CMD_READY on the newly allocated channel.

@msc
APP,TILE;

APP->TILE [label="TOA_CONNECTIONLESS_CID | Token | TOA_CMD_OPEN_CHANNEL | RandA"];
TILE box TILE [label="Allocate channel and Generate session key"];
TILE->APP [label="TOA_CONNECTIONLESS_CID | Token | TOA_RSP_OPEN_CHANNEL | New CID | RandT"];
APP box APP [label="Generate session key"];

APP->TILE [label="New CID | TOA_CMD_READY | TOA_CMD_READY payload | MIC"];
TILE->APP [label="New CID | TOA_RSP_READY | TOA_RSP_READY payload | MIC"];
@endmsc

(See documentation for each command/response for format of each message).

### Session key generation

The session key is generated using HMAC-SHA256 with the Tile's authentication
key as the key and the message as

RandA    | RandT    | CID    | Token from @ref TOA_CMD_OPEN_CHANNEL
-------- | -------- | ------ | ------------------------------------
14 bytes | 13 bytes | 1 byte | 4 bytes

The session key is the first 16 bytes of the hash.


### MIC generation

The MIC for authenticated channels is generated using HMAC-SHA256 with the
session key as the key. The message to be hashed varies depending on whether
the packet originated with the TOA client or server. For a packet sent from
the client to the server, the message is

Nonce A | 1      | Text length | Text              | 0
------- | ------ | ----------- | ----------------- | ----
8 bytes | 1 byte | 1 byte      | Text length bytes | Until message is 32 bytes long

and a packet from the server to the client has the message format

Nonce T | 0      | Text length | Text              | 0
------- | ------ | ----------- | ----------------- | ----
8 bytes | 1 byte | 1 byte      | Text length bytes | Until message is 32 bytes long

The MIC is the first four bytes of the hash.
The nonce values are simply counters which increment before each MIC is
generated. The text is the TOA message, without the CID or the MIC. Example
C code for generating the MIC of a message from the TOA client to the TOA
server:

~~~~~~~~{.c}
void mic_example(void)
{
	// Full payload
	uint8_t msg[] = {
		cid,
		TOA_CMD_SONG,
		TOA_SONG_CMD_PLAY,
		TILE_SONG_FIND,
		3,               // Strength 3
		0, 0, 0, 0       // Space for MIC
	};
	
	uint8_t hash_message[32] = {0};
	
	nonceA++;
	
	memcpy(hash_message, &nonceA, 8);      // nonceA since packet is from client to server
	hash_message[8] = 1;                   // 1 since direction is from client to server
	hash_message[9] = sizeof(msg) - 1 - 4; // -1 for CID and -4 for MIC
	memcpy(hash_message + 10, msg + 1, hash_message[9]);
	
	// auth_key is 16 bytes, message is 32 bytes, and desired output is 4 bytes
	hmac_sha256(auth_key, 16, hash_message, 32, &msg[sizeof(msg)-4], 4);
}
~~~~~~~~


### Closing a channel

TOA clients and servers may close a channel at any time using
@ref TOA_CMD_CLOSE_CHANNEL and @ref TOA_RSP_CLOSE_CHANNEL, respecitvely.
Format for a close channel message:

CID    | TOA_CMD/RSP_CLOSE_CHANNEL | @ref TOA_CHANNEL_CLOSE_REASONS code | Payload | MIC
------ | ------------------------- | ----------------------------------- | ------- | ----
1 byte | 1 byte                    | 1 byte                              | Varies  | 4 bytes

There are certain behaviors expected of a close channel request.

1. The sender and recipient of a close channel command/response must immediately
   close the channel and not send any further data over the channel.
2. The close channel command/response must contain a reason code and the payload
   must conform to the format specified for that particular reason code.
3. The close channel response may be sent over the broadcast CID, and in this
   case, all clients must close their open channels.



## Broadcast channel

Transactions on the broadcast channel have the following format:

@ref TOA_BROADCAST_CID | TOA code | TOA payload         | MIC
---------------------- | -------- | ------------------- | ---
1 byte                 | 1 byte   | Up to TOA_MPS bytes | 4 bytes


### Broadcast key generation

The broadcast key is generated using HMAC-SHA256 with the Tile's authentication
key as the key and the message as

RandT[0:9] | Tile ID  | 0
---------- | -------- | ------
10 bytes   | 8 bytes  | 14 bytes

where RandT[0:9] is the first 10 bytes of the RandT value received in the
@ref TOA_RSP_OPEN_CHANNEL. The broadcast key is the first 16 bytes of the hash.


### Broadcast MIC generation

The MIC for the broadcast channel is generated using HMAC-SHA256 with the
broadcast key as the key. The message to be hashed is

Nonce B | Text length | Text              | 0
------- | ----------- | ----------------- | ----
8 bytes | 1 byte      | Text length bytes | Until message is 32 bytes long

The MIC is the first four bytes of the hash.
The nonce value is simply a counter which increments before each MIC is
generated. The @ref TOA_RSP_READY message includes the current value of
NonceB.


*/
